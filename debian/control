Source: python-ephemeral-port-reserve
Section: python
Priority: optional
Maintainer: Debian Python Team <team+python@tracker.debian.org>
Uploaders:
 Thomas Goirand <zigo@debian.org>,
Build-Depends:
 debhelper-compat (= 11),
 dh-python,
 openstack-pkg-tools,
 python3-all,
 python3-setuptools,
Build-Depends-Indep:
 python3-pytest <!nocheck>,
Standards-Version: 4.6.0
Vcs-Browser: https://salsa.debian.org/openstack-team/python/python-ephemeral-port-reserve
Vcs-Git: https://salsa.debian.org/openstack-team/python/python-ephemeral-port-reserve.git
Homepage: https://github.com/Yelp/ephemeral-port-reserve/

Package: python3-ephemeral-port-reserve
Architecture: all
Depends:
 ${misc:Depends},
 ${python3:Depends},
Description: binds to an ephemeral port, force it into the TIME_WAIT state, and unbind it
 Sometimes you need a networked program to bind to a port that can't be
 hard-coded. Generally this is when you want to run several of them in
 parallel; if they all bind to port 8080, only one of them can succeed.
 .
 The usual solution is the "port 0 trick". If you bind to port 0, your kernel
 will find some arbitrary high-numbered port that's unused and bind to that.
 Afterward you can query the actual port that was bound to if you need to use
 the port number elsewhere. However, there are cases where the port 0 trick
 won't work. For example, mysqld takes port 0 to mean "the port configured in
 my.cnf". Docker can bind your containers to port 0, but uses its own
 implementation to find a free port which races and fails in the face of
 parallelism.
 .
 ephemeral-port-reserve helps you using port 0.
